# Modules from Flask
from flask import Flask, jsonify
from flask_cors import CORS

# Imports for environment variable loading
import json
from dotenv import load_dotenv
import os
import urllib.parse
import sys

# Firebase imports
import firebase_admin
from firebase_admin import credentials, firestore

# For fuzzy string matching for product name extraction
from rapidfuzz import fuzz, process


# Load environment variables from a .env file
load_dotenv()

# Get Firebase credentials as a JSON string from the environment
firebaseCredentials = os.getenv("FIREBASE_CREDENTIALS")
credDict = json.loads(firebaseCredentials)

# Initialize Firebase database with the credentials
cred = credentials.Certificate(credDict)
firebase_admin.initialize_app(cred)
db = firestore.client()

# Initialize Flask app + enable CORS
app = Flask(__name__)
CORS(app, origins="*")

# Add current directory to system path (used to import BAML client) and import BAML
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
from baml_client.sync_client import b


# Extract product names using BAML
def extractProductName(titles):
    try:
        response = b.ExtractProductName(titles)
        return {"names": response.productNames}
    except Exception as e:
        return {"error": "Failed to extract name", "message": str(e)}


# Extract product review links associated with each product name using BAML
def extractProductReviewLinks(name, links):
    try:
        response = b.ExtractProductReviewLinks(name, links)
        return {"links": response.productReviewURLs}
    except Exception as e:
        return {"error": "Failed to extract links", "message": str(e)}


# Load scraped headphone review data from a local JSON file (which is generated by the web scraping spider)
def loadHeadphoneReviews():
    with open(
        "../../frontend/public/headphonereviews.json", "r", encoding="utf-8"
    ) as file:
        return json.load(file)


# Get image URL from a review, by searching through the scraped data using a link for that review
def getImageUsingLink(reviewLink):
    reviews = loadHeadphoneReviews()
    for review in reviews:
        if review.get("link") == reviewLink:
            return review.get(
                "image", None
            )  # If matched, return the associated image URL (or None if not found)
    return None


# Group similar product reviews together using fuzzy matching, 'threshold' = The minimum similarity score (0â€“100) required for two titles to be considered similar.
def groupReviews(reviews, threshold=52):
    groups = []  # Grouped review objects
    groupNames = []  # Names used to identify groups

    for review in reviews:
        title = review["name"]
        link = review["link"]

        # Find closest match for title among existing group names
        match = process.extractOne(
            title, groupNames, scorer=fuzz.token_set_ratio, score_cutoff=threshold
        )

        # If a close match exists, add to that group
        if match:
            matchedName = match[0]
            for group in groups:
                if group["group_name"] == matchedName:
                    group["titles"].append(title)
                    group["links"].append(link)
                    break
        else:
            # Create a new group if no close match is found
            groups.append({"group_name": title, "titles": [title], "links": [link]})
            groupNames.append(title)

    # Return only groups with 2 or more titles
    return [
        {"names": group["titles"], "links": group["links"]}
        for group in groups
        if len(group["titles"]) >= 2
    ]


# Create an Amazon search URL for a product
def getAmazonLink(name):
    return f"https://www.amazon.com/s?k={urllib.parse.quote(name)}"


# Flask route to get product reviews
@app.route("/productreviews", methods=["GET"])
def getProductReviews():
    try:
        reviews = loadHeadphoneReviews()
        repeated = groupReviews(reviews)
        return jsonify(repeated), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# This section runs only when executing this file directly. Only needs to be run when uploading list of products to Firestore database.
if __name__ == "__main__":
    headphoneReviews = loadHeadphoneReviews()
    repeatedReviews = groupReviews(headphoneReviews)

    collection = "productReviews"
    collRef = db.collection(collection)

    # Delete existing documents in the database, to avoid duplicates
    # Uncomment these lines to clear the collection before uploading new data
    # for doc in collRef.stream():
    # doc.reference.delete()

    uploadCount = 0

    for item in repeatedReviews:
        print(f"\nExtracting product name from titles: {item['names']}")
        extractedNames = extractProductName(item["names"])
        productNames = extractedNames.get("names", [])
        print(f"Extracted names: {productNames}")

        if not productNames:
            print(f"name extraction failed: {item['names']}")
            continue

        print(f"Filtering links:")
        for link in item["links"]:
            print(f" - {link}")

        # Loop through each extracted product name for the current group
        for name in productNames:
            singleResult = extractProductReviewLinks(
                name, item["links"]
            )  # filter and return review links for the given name
            links = singleResult.get("links", [])

            print(f"\nBAML returned {len(links)} filtered review links for '{name}':")
            for link in links:
                print(f"- link: {link}")

            # Skip product if it has fewer than 2 valid review links
            if len(links) < 2:
                print(f"Skipped '{name}' (less than 2 valid review links)")
                continue

            # Initialize image as None, find the first matching image using links, image stays None if not found
            image = None
            for link in links:
                image = getImageUsingLink(link)
                if image:
                    print(f"Found image: {image}")
                    break

            doc = {
                "name": name,
                "links": links,
                "amazonLink": getAmazonLink(name),
                "image": image,
            }

            # Add the document to the Firestore collection
            collRef.add(doc)
            uploadCount += 1
            print(f"Uploaded '{name}' with {len(links)} reviews.")

    print(f"\nUploaded {uploadCount} product(s) to Firestore.")

    # Only uncomment server configurations when uploading collection of products to firestore. Does not need to be run everytime app starts up.
    # Development and production server configs
    # port = int(os.environ.get("PORT", 5000))
    # app.run(debug=False, host="0.0.0.0", port=port)
    # app.run(debug=True, port=8080)
